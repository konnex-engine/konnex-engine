openapi: 3.0.0

info:
  version: '1.0.0'
  title: "Konnex Contact Details API"
  description: 'An API that allows for creating, reading, updating and deleting of Konnex User Contact Details data.'
  termsOfService: 'https://api.konnex-engine.io/terms-of-service'
  contact:
    name: Konnex Engine           # For demonstration purposes
    url: https://konnex-engine.io # This domain name is available...
    email: info@konnex-engine.io  # Self-explanatory...
  license:
    name: Konnex Public License
    url: https://konnex-engine.io/license

servers:
  - url: https://api.konnex-engine.io/v1
    description: 'Production API'

  - url: https://apidev.konnex-engine.io/v1
    description: 'Development API'

  # Added by API Auto Mocking Plugin
  - url: https://virtserver.swaggerhub.com/Kinexis/Konnex_Contact_Details_API/1.0.0
    description: 'SwaggerHub API Auto Mocking'

paths:
  /{objectType}/{objectID}/contactdetails:
    get:
      description: 'Obtain information about Konnex users contact details.'
      summary: 'Retrieves all available Konnex User cotact detail data'
      tags:
        - Contact Details
      operationId: getContactDetails
      parameters:
        - name: objectType
          in: path
          required: true
          description: 'The type of object to get contact details for.'
          schema:
            type: string
            enum:
              - users
                companies
                leads
                consultants
                advisers
                introducers
                employees
        - name: objectID
          in: path
          required: true
          description: 'The leadID of the Lead to get contact details for'
          schema:
            type: integer
            example: 2654375
        - name: bodyLimit
          in: query
          description: 'The number of user contact details records to return.'
          schema:
            type: integer
            minimum: 10
            maximum: 50
            example: 15
        - name: pageLimit
          in: query
          description: 'The number of pages of contact detail records to return.'
          schema:
            type: integer
            minimum: 1
            maximum: 10
            example: 3
      responses:
        200:
          description: 'Successfully retrieved available contact details.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'


    post:
      description: 'Creates a new Konnex User Contact Detail in the database.'
      summary: 'Creates a new Contact Detail'
      tags:
        - Contact Details
      operationId: createContactDetails
      parameters:
        - name: objectType
          in: path
          required: true
          description: 'The type of object to get contact details for.'
          schema:
            type: string
            enum:
              - users
                companies
                leads
                consultants
                advisers
                introducers
                employees
            example: 'leads'
        - name: objectID
          in: path
          required: true
          description: 'The objectID of the object to get addresses for'
          schema:
            type: integer
            example: 2654375

      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateContactDetailsForm'

            encoding:
              payload:
                contentType: application/json

      responses:
        201:
          description: 'Successfully created new Contact Detail.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
            application/xml:
              schema:
                $ref: '#/components/schemas/Contact'

  /{objectType}/{objectID}/contactdetails/{contactID}:
    get:
      description: 'Retrieve a specific contact detail by contact detail ID.'
      summary: Returns a specific contact detail by ID
      tags:
        - Contact Details
      operationId: getContactDetailsByID
      parameters:
        - name: objectType
          in: path
          required: true
          description: 'The type of object to get contact details for.'
          schema:
            type: string
            enum:
              - users
                companies
                leads
                consultants
                advisers
                introducers
                employees
            example: 'leads'
        - name: objectID
          in: path
          required: true
          description: 'The leadID of the Lead to get addresses for'
          schema:
            type: integer
            example: 2654375
        - name: contactID
          in: path
          required: true
          description: 'The Contact ID for the specific contact detail.'
          schema:
            type: integer
            example: 635853879
      responses:
        200:
          description: 'Successfully retrieved Contact Detail by ID.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
            application/xml:
              schema:
                $ref: '#/components/schemas/Contact'

    put:
      description: 'Update a specific Contact Detail.'
      summary: 'Update contact detail data.'
      tags:
        - Contact Details
      operationId: updateContactDetails
      parameters:
        - name: objectType
          in: path
          required: true
          description: 'The type of object to get contact details for.'
          schema:
            type: string
            enum:
              - users
                companies
                leads
                consultants
                advisers
                introducers
                employees
            example: 'leads'
        - name: objectID
          in: path
          required: true
          description: 'The leadID of the Lead to get addresses for'
          schema:
            type: integer
            example: 2654375
        - name: contactID
          in: path
          required: true
          description: 'The Contact Detail ID for the specific company.'
          schema:
            type: integer
            example: 635853879
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactDetailsForm'
      responses:
        202:
          description: 'Successfully updated Contact Detail data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
            application/xml:
              schema:
                $ref: '#/components/schemas/Contact'

    delete:
      description: 'Delete a specific Contact Detail.'
      summary: 'Delete contact detail data.'
      tags:
        - Contact Details
      operationId: deleteContactDetails
      parameters:
        - name: objectType
          in: path
          required: true
          description: 'The type of object to get contact details for.'
          schema:
            type: string
            enum:
              - users
                companies
                leads
                consultants
                advisers
                introducers
                employees
            example: 'leads'
        - name: objectID
          in: path
          required: true
          description: 'The leadID of the Lead to get addresses for'
          schema:
            type: integer
            example: 2654375
        - name: contactID
          in: path
          required: true
          description: 'The contact ID for the specific contact to delete.'
          schema:
            type: integer
            example: 635853879

      responses:
        204:
          description: 'Successfully deleted Contact Detail data.'

components:
  schemas:

    Contact:
      type: object
      title: 'Contact'
      description: 'Data model containing a single Contact Detail.'
      properties:
        type:
          description: 'The type of contact details. Email, Telephone, Mobile, Fax, Home, Work, Business'
          type: string
        value:
          description: 'The value of the contact detail'
          type: string
        is default:
          description: 'Is this the default contact detail'
          type: boolean
      required:
        - type
        - value

    Contacts:
      type: array
      description: 'An array of Contact Details model objects'
      items:
        $ref: '#/components/schemas/Contact'

    CreateContactDetailsForm:
      type: object
      properties:
        type:
          description: 'The type of contact detail. Email, Telephone, Mobile, Fax, Home, Work, Business, Facebook, Twitter, Instagram'
          type: string
        value:
          description: 'The value of the contact detail'
          type: string
        is default:
          description: 'Is this the default contact detail'
          type: boolean
      required:
        - type
        - value

    UpdateContactDetailsForm:
      type: array
      items:
        $ref: '#/components/schemas/KeyValuePairs'

    KeyValuePairs:
      type: object
      title: 'KeyValuePairs'
      properties:
        key:
          type: string
          example: "value"
        value:
          type: string
          example: '+44 (0) 7777 654321'