<?php

/**
 * Konnex Integrations IntelliFlo Leads API
 * <p>A simple API that wraps the IntelliFlo Leads API.</p><p>NOTE: In order to use this Integrations API, users must have a paid IntelliFlo subscription and an active Tenant ID for OAuth2 Authentication. <p>For further information please refer to the <a href=\"https://developer.intelliflo.com\">IntelliFlo Developer Documentation</a>.</p>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@konnex-engine.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > swagger-codegen/modules/swagger-codegen/src/main/resources/php-laravel/
 */


namespace KonnexEngine\Http\Controllers;

use Illuminate\Support\Facades\Request;

class LeadsController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation createLead
     *
     * Creates a new Lead.
     *
     *
     * @return Http response
     */
    public function createLead()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing createLead as a post method ?');
    }
    /**
     * Operation getLeads
     *
     * Returns an array of Lead objects.
     *
     *
     * @return Http response
     */
    public function getLeads()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $personFirstName = $input['personFirstName'];

        $personLastName = $input['personLastName'];

        $corporateName = $input['corporateName'];

        $trustName = $input['trustName'];

        $currentAdviserId = $input['currentAdviserId'];


        return response('How about implementing getLeads as a get method ?');
    }
    /**
     * Operation checkLeadExists
     *
     * Check if a Lead exists.
     *
     * @param int $leadID  (required)
     *
     * @return Http response
     */
    public function checkLeadExists($leadID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing checkLeadExists as a head method ?');
    }
    /**
     * Operation deleteLead
     *
     * Check if a Lead exists.
     *
     * @param int $leadID  (required)
     *
     * @return Http response
     */
    public function deleteLead($leadID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteLead as a delete method ?');
    }
    /**
     * Operation getLead
     *
     * Return a specific Lead object by ID.
     *
     * @param int $leadID  (required)
     *
     * @return Http response
     */
    public function getLead($leadID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getLead as a get method ?');
    }
    /**
     * Operation updateLead
     *
     * Update Lead.
     *
     * @param int $leadID  (required)
     *
     * @return Http response
     */
    public function updateLead($leadID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateLead as a put method ?');
    }
}
