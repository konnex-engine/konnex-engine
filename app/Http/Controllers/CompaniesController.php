<?php

/**
 * Konnex Company API
 * An API that allows for creating, reading, updating and deleting of Konnex User Company data.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@konnex-engine.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > swagger-codegen/modules/swagger-codegen/src/main/resources/php-laravel/
 */


namespace KonnexEngine\Http\Controllers;

use Illuminate\Support\Facades\Request;

class CompaniesController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation createCompany
     *
     * Creates a new Company.
     *
     *
     * @return Http response
     */
    public function createCompany()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['userID'])) {
            throw new \InvalidArgumentException('Missing the required parameter $userID when calling createCompany');
        }
        $userID = $input['userID'];

        $name = $input['name'];


        return response('How about implementing createCompany as a post method ?');
    }
    /**
     * Operation getCompanies
     *
     * Retrieves all available Konnex User company data.
     *
     *
     * @return Http response
     */
    public function getCompanies()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if ($input['bodyLimit'] > 50) {
            throw new \InvalidArgumentException('invalid value for $bodyLimit when calling CompaniesController.getCompanies, must be smaller than or equal to 50.');
        }
        if ($input['bodyLimit'] < 10) {
            throw new \InvalidArgumentException('invalid value for $bodyLimit when calling CompaniesController.getCompanies, must be bigger than or equal to 10.');
        }
        $bodyLimit = $input['bodyLimit'];

        if ($input['pageLimit'] > 10) {
            throw new \InvalidArgumentException('invalid value for $pageLimit when calling CompaniesController.getCompanies, must be smaller than or equal to 10.');
        }
        if ($input['pageLimit'] < 1) {
            throw new \InvalidArgumentException('invalid value for $pageLimit when calling CompaniesController.getCompanies, must be bigger than or equal to 1.');
        }
        $pageLimit = $input['pageLimit'];


        return response('How about implementing getCompanies as a get method ?');
    }
    /**
     * Operation deleteCompany
     *
     * Delete company data..
     *
     * @param int $companyID The Company ID for the specific company. (required)
     *
     * @return Http response
     */
    public function deleteCompany($companyID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteCompany as a delete method ?');
    }
    /**
     * Operation getCompanyByID
     *
     * Retrieves data for a specific company.
     *
     * @param int $companyID The Company ID for the specific company. (required)
     *
     * @return Http response
     */
    public function getCompanyByID($companyID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getCompanyByID as a get method ?');
    }
    /**
     * Operation updateCompany
     *
     * Update company data..
     *
     * @param int $companyID The Company ID for the specific company. (required)
     *
     * @return Http response
     */
    public function updateCompany($companyID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateCompany as a put method ?');
    }
}
